akka {
	loglevel = DEBUG
    loggers = ["Akka.Logger.NLog.NLogLogger, Akka.Logger.NLog"]
    actor.provider = cluster
    remote {
        dot-netty.tcp {
            port = 5002
            hostname = localhost
            }
    }

    cluster {
        seed-nodes = ["akka.tcp://OnlineBanking@localhost:5002"]
    }
    
    actor
    {
        debug
        {
            receive = on      # log any received message
            autoreceive = on  # log automatically received messages, e.g. PoisonPill
            lifecycle = on    # log actor lifecycle changes
            event-stream = on # log subscription changes for Akka.NET event stream
            unhandled = on    # log unhandled messages sent to actors
        }

        deployment
        {
            /loginManager {
            #loginManager actor will use smallest-mailbox routing strategies where message is passed
            #to the routtee with at least number of messages in mailbox
                router = smallest-mailbox-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }
            /accountGetterActor {
            #accountGetter actor will use round robin routing strategy. 
            #It's the simplest way to distribute messages to multiple worker actors, on a best-effort basis.
                router = round-robin-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
                
            }
            /transactionGetterActor {
            #transactionGetter actor will use random routing strategies where message is passed
            #to the routtes in random order
                router = random-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }
            /currenciesGetterActor {
            #currenciesGetterActor actor will use consistent hash routing strategy where message with same hash key are passed
            #to the same routee; message which is send needs to implement IConsistentHashable interface which has ConsistentHashKey property
                router = consistent-hashing-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }

            /feeGetterActor {
            #feeGetterActor actor will use The TailChoppingPool router which send the message to a random routee,
            #and if no response is received after a specified delay, send it to another randomly selected routee.
            #It waits for the first reply from any of the routees, and forwards it back to the original sender.
            #Other replies are discarded. If no reply is received after a specified interval, a timeout Failure is generated.
                router = tail-chopping-pool
                nr-of-instances = 10
                within = 10s
                tail-chopping-router.interval = 20ms
                 cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }

             /confirmExchangeActor {
            #confirmExchange actor will use round robin routing strategy. 
            #It's the simplest way to distribute messages to multiple worker actors, on a best-effort basis.
                router = round-robin-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }

             /paymentActor {
            #payment actor will use round robin routing strategy. 
            #It's the simplest way to distribute messages to multiple worker actors, on a best-effort basis.
                router = round-robin-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }

             /loanActor {
            #loan actor will use round robin routing strategy. 
            #It's the simplest way to distribute messages to multiple worker actors, on a best-effort basis.
               router = round-robin-pool
                nr-of-instances = 10
                cluster {
                    enabled = on
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 5
                }
            }

             /profileActor {
            #profileActor actor will use smallest-mailbox routing strategies where message is passed
            #to the routtee with at least number of messages in mailbox
                router = smallest-mailbox-pool
                resizer {
                #dynamically adjusting number of routees based on responsivness of the system
                    enabled = on
                    lower-bound = 1
                    upper-bound = 10
                }
            }

            /helpActor {
            #helpActor actor will use smallest-mailbox routing strategies where message is passed
            #to the routtee with at least number of messages in mailbox
                router = smallest-mailbox-pool
                resizer {
                #dynamically adjusting number of routees based on responsivness of the system
                    enabled = on
                    lower-bound = 1
                    upper-bound = 10
                }
            }

            /notificationStorageActor {
            #notificationStorageActor actor will use smallest-mailbox routing strategies where message is passed
            #to the routtee with at least number of messages in mailbox
                router = smallest-mailbox-pool
                resizer {
                #dynamically adjusting number of routees based on responsivness of the system
                    enabled = on
                    lower-bound = 1
                    upper-bound = 10
                }
            }

            /notificationActor {
           
            }
        }    
    }
}

akka.persistence{
      journal {
            plugin = "akka.persistence.journal.sql-server"
            sql-server {
                
                # qualified type name of the SQL Server persistence journal actor
                class = "Akka.Persistence.SqlServer.Journal.SqlServerJournal, Akka.Persistence.SqlServer"
               
                # dispatcher used to drive journal actor
			    plugin-dispatcher = "akka.actor.default-dispatcher"
                
                # SQL server schema name to table corresponding with persistent journal
                schema-name = dbo
                
                # should corresponding journal table be initialized automatically
                auto-initialize = on
                
                # connection string used for database access
                connection-string = "Data source=(localdb)\\MSSQLLocalDB; initial catalog=AkkaPersistenceOnlineBankingDb; integrated security=True"
                
                # default SQL commands timeout
			    connection-timeout = 30s

                # SQL server table corresponding with persistent journal
			    table-name = EventJournal

                # Recommended: change default circuit breaker settings
			    # By uncommenting below and using Connection Timeout + Command Timeout
			    # circuit-breaker.call-timeout=30s
            }
      } 
      snapshot-store{
            plugin = "akka.persistence.snapshot-store.sql-server"
            sql-server {
                # qualified type name of the SQL Server persistence journal actor
                class = "Akka.Persistence.SqlServer.Snapshot.SqlServerSnapshotStore, Akka.Persistence.SqlServer"

                # dispatcher used to drive journal actor
			    plugin-dispatcher = "akka.actor.default-dispatcher"

                # default SQL commands timeout
			    connection-timeout = 30s
                
                # SQL server schema name to table corresponding with persistent journal
                schema-name = dbo
                
                # should corresponding journal table be initialized automatically
                auto-initialize = on
                
                # connection string used for database access
                connection-string = "Data source=(localdb)\\MSSQLLocalDB; initial catalog=AkkaPersistenceOnlineBankingDb; integrated security=True"
            }
      }
}
